// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: userservice/userservice.proto

package userserviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	userservice "github.com/ocenb/music-protos/gen/userservice"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "userservice.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceRegisterProcedure is the fully-qualified name of the UserService's Register RPC.
	UserServiceRegisterProcedure = "/userservice.UserService/Register"
	// UserServiceLoginProcedure is the fully-qualified name of the UserService's Login RPC.
	UserServiceLoginProcedure = "/userservice.UserService/Login"
	// UserServiceLogoutProcedure is the fully-qualified name of the UserService's Logout RPC.
	UserServiceLogoutProcedure = "/userservice.UserService/Logout"
	// UserServiceLogoutAllProcedure is the fully-qualified name of the UserService's LogoutAll RPC.
	UserServiceLogoutAllProcedure = "/userservice.UserService/LogoutAll"
	// UserServiceRefreshProcedure is the fully-qualified name of the UserService's Refresh RPC.
	UserServiceRefreshProcedure = "/userservice.UserService/Refresh"
	// UserServiceVerifyProcedure is the fully-qualified name of the UserService's Verify RPC.
	UserServiceVerifyProcedure = "/userservice.UserService/Verify"
	// UserServiceNewVerificationProcedure is the fully-qualified name of the UserService's
	// NewVerification RPC.
	UserServiceNewVerificationProcedure = "/userservice.UserService/NewVerification"
	// UserServiceChangeEmailProcedure is the fully-qualified name of the UserService's ChangeEmail RPC.
	UserServiceChangeEmailProcedure = "/userservice.UserService/ChangeEmail"
	// UserServiceChangePasswordProcedure is the fully-qualified name of the UserService's
	// ChangePassword RPC.
	UserServiceChangePasswordProcedure = "/userservice.UserService/ChangePassword"
	// UserServiceGetUserByUsernameProcedure is the fully-qualified name of the UserService's
	// GetUserByUsername RPC.
	UserServiceGetUserByUsernameProcedure = "/userservice.UserService/GetUserByUsername"
	// UserServiceChangeUsernameProcedure is the fully-qualified name of the UserService's
	// ChangeUsername RPC.
	UserServiceChangeUsernameProcedure = "/userservice.UserService/ChangeUsername"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/userservice.UserService/DeleteUser"
)

// UserServiceClient is a client for the userservice.UserService service.
type UserServiceClient interface {
	Register(context.Context, *connect.Request[userservice.RegisterRequest]) (*connect.Response[userservice.RegisterResponse], error)
	Login(context.Context, *connect.Request[userservice.LoginRequest]) (*connect.Response[userservice.LoginResponse], error)
	Logout(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutResponse], error)
	LogoutAll(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutAllResponse], error)
	Refresh(context.Context, *connect.Request[userservice.RefreshRequest]) (*connect.Response[userservice.RefreshResponse], error)
	Verify(context.Context, *connect.Request[userservice.VerifyRequest]) (*connect.Response[userservice.VerifyResponse], error)
	NewVerification(context.Context, *connect.Request[userservice.NewVerificationRequest]) (*connect.Response[userservice.NewVerificationResponse], error)
	ChangeEmail(context.Context, *connect.Request[userservice.ChangeEmailRequest]) (*connect.Response[userservice.ChangeEmailResponse], error)
	ChangePassword(context.Context, *connect.Request[userservice.ChangePasswordRequest]) (*connect.Response[userservice.ChangePasswordResponse], error)
	GetUserByUsername(context.Context, *connect.Request[userservice.GetUserByUsernameRequest]) (*connect.Response[userservice.GetUserByUsernameResponse], error)
	ChangeUsername(context.Context, *connect.Request[userservice.ChangeUsernameRequest]) (*connect.Response[userservice.ChangeUsernameResponse], error)
	DeleteUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.DeleteUserResponse], error)
}

// NewUserServiceClient constructs a client for the userservice.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := userservice.File_userservice_userservice_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		register: connect.NewClient[userservice.RegisterRequest, userservice.RegisterResponse](
			httpClient,
			baseURL+UserServiceRegisterProcedure,
			connect.WithSchema(userServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[userservice.LoginRequest, userservice.LoginResponse](
			httpClient,
			baseURL+UserServiceLoginProcedure,
			connect.WithSchema(userServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[emptypb.Empty, userservice.LogoutResponse](
			httpClient,
			baseURL+UserServiceLogoutProcedure,
			connect.WithSchema(userServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		logoutAll: connect.NewClient[emptypb.Empty, userservice.LogoutAllResponse](
			httpClient,
			baseURL+UserServiceLogoutAllProcedure,
			connect.WithSchema(userServiceMethods.ByName("LogoutAll")),
			connect.WithClientOptions(opts...),
		),
		refresh: connect.NewClient[userservice.RefreshRequest, userservice.RefreshResponse](
			httpClient,
			baseURL+UserServiceRefreshProcedure,
			connect.WithSchema(userServiceMethods.ByName("Refresh")),
			connect.WithClientOptions(opts...),
		),
		verify: connect.NewClient[userservice.VerifyRequest, userservice.VerifyResponse](
			httpClient,
			baseURL+UserServiceVerifyProcedure,
			connect.WithSchema(userServiceMethods.ByName("Verify")),
			connect.WithClientOptions(opts...),
		),
		newVerification: connect.NewClient[userservice.NewVerificationRequest, userservice.NewVerificationResponse](
			httpClient,
			baseURL+UserServiceNewVerificationProcedure,
			connect.WithSchema(userServiceMethods.ByName("NewVerification")),
			connect.WithClientOptions(opts...),
		),
		changeEmail: connect.NewClient[userservice.ChangeEmailRequest, userservice.ChangeEmailResponse](
			httpClient,
			baseURL+UserServiceChangeEmailProcedure,
			connect.WithSchema(userServiceMethods.ByName("ChangeEmail")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[userservice.ChangePasswordRequest, userservice.ChangePasswordResponse](
			httpClient,
			baseURL+UserServiceChangePasswordProcedure,
			connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		getUserByUsername: connect.NewClient[userservice.GetUserByUsernameRequest, userservice.GetUserByUsernameResponse](
			httpClient,
			baseURL+UserServiceGetUserByUsernameProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserByUsername")),
			connect.WithClientOptions(opts...),
		),
		changeUsername: connect.NewClient[userservice.ChangeUsernameRequest, userservice.ChangeUsernameResponse](
			httpClient,
			baseURL+UserServiceChangeUsernameProcedure,
			connect.WithSchema(userServiceMethods.ByName("ChangeUsername")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[emptypb.Empty, userservice.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	register          *connect.Client[userservice.RegisterRequest, userservice.RegisterResponse]
	login             *connect.Client[userservice.LoginRequest, userservice.LoginResponse]
	logout            *connect.Client[emptypb.Empty, userservice.LogoutResponse]
	logoutAll         *connect.Client[emptypb.Empty, userservice.LogoutAllResponse]
	refresh           *connect.Client[userservice.RefreshRequest, userservice.RefreshResponse]
	verify            *connect.Client[userservice.VerifyRequest, userservice.VerifyResponse]
	newVerification   *connect.Client[userservice.NewVerificationRequest, userservice.NewVerificationResponse]
	changeEmail       *connect.Client[userservice.ChangeEmailRequest, userservice.ChangeEmailResponse]
	changePassword    *connect.Client[userservice.ChangePasswordRequest, userservice.ChangePasswordResponse]
	getUserByUsername *connect.Client[userservice.GetUserByUsernameRequest, userservice.GetUserByUsernameResponse]
	changeUsername    *connect.Client[userservice.ChangeUsernameRequest, userservice.ChangeUsernameResponse]
	deleteUser        *connect.Client[emptypb.Empty, userservice.DeleteUserResponse]
}

// Register calls userservice.UserService.Register.
func (c *userServiceClient) Register(ctx context.Context, req *connect.Request[userservice.RegisterRequest]) (*connect.Response[userservice.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Login calls userservice.UserService.Login.
func (c *userServiceClient) Login(ctx context.Context, req *connect.Request[userservice.LoginRequest]) (*connect.Response[userservice.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls userservice.UserService.Logout.
func (c *userServiceClient) Logout(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// LogoutAll calls userservice.UserService.LogoutAll.
func (c *userServiceClient) LogoutAll(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutAllResponse], error) {
	return c.logoutAll.CallUnary(ctx, req)
}

// Refresh calls userservice.UserService.Refresh.
func (c *userServiceClient) Refresh(ctx context.Context, req *connect.Request[userservice.RefreshRequest]) (*connect.Response[userservice.RefreshResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// Verify calls userservice.UserService.Verify.
func (c *userServiceClient) Verify(ctx context.Context, req *connect.Request[userservice.VerifyRequest]) (*connect.Response[userservice.VerifyResponse], error) {
	return c.verify.CallUnary(ctx, req)
}

// NewVerification calls userservice.UserService.NewVerification.
func (c *userServiceClient) NewVerification(ctx context.Context, req *connect.Request[userservice.NewVerificationRequest]) (*connect.Response[userservice.NewVerificationResponse], error) {
	return c.newVerification.CallUnary(ctx, req)
}

// ChangeEmail calls userservice.UserService.ChangeEmail.
func (c *userServiceClient) ChangeEmail(ctx context.Context, req *connect.Request[userservice.ChangeEmailRequest]) (*connect.Response[userservice.ChangeEmailResponse], error) {
	return c.changeEmail.CallUnary(ctx, req)
}

// ChangePassword calls userservice.UserService.ChangePassword.
func (c *userServiceClient) ChangePassword(ctx context.Context, req *connect.Request[userservice.ChangePasswordRequest]) (*connect.Response[userservice.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// GetUserByUsername calls userservice.UserService.GetUserByUsername.
func (c *userServiceClient) GetUserByUsername(ctx context.Context, req *connect.Request[userservice.GetUserByUsernameRequest]) (*connect.Response[userservice.GetUserByUsernameResponse], error) {
	return c.getUserByUsername.CallUnary(ctx, req)
}

// ChangeUsername calls userservice.UserService.ChangeUsername.
func (c *userServiceClient) ChangeUsername(ctx context.Context, req *connect.Request[userservice.ChangeUsernameRequest]) (*connect.Response[userservice.ChangeUsernameResponse], error) {
	return c.changeUsername.CallUnary(ctx, req)
}

// DeleteUser calls userservice.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[userservice.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the userservice.UserService service.
type UserServiceHandler interface {
	Register(context.Context, *connect.Request[userservice.RegisterRequest]) (*connect.Response[userservice.RegisterResponse], error)
	Login(context.Context, *connect.Request[userservice.LoginRequest]) (*connect.Response[userservice.LoginResponse], error)
	Logout(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutResponse], error)
	LogoutAll(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutAllResponse], error)
	Refresh(context.Context, *connect.Request[userservice.RefreshRequest]) (*connect.Response[userservice.RefreshResponse], error)
	Verify(context.Context, *connect.Request[userservice.VerifyRequest]) (*connect.Response[userservice.VerifyResponse], error)
	NewVerification(context.Context, *connect.Request[userservice.NewVerificationRequest]) (*connect.Response[userservice.NewVerificationResponse], error)
	ChangeEmail(context.Context, *connect.Request[userservice.ChangeEmailRequest]) (*connect.Response[userservice.ChangeEmailResponse], error)
	ChangePassword(context.Context, *connect.Request[userservice.ChangePasswordRequest]) (*connect.Response[userservice.ChangePasswordResponse], error)
	GetUserByUsername(context.Context, *connect.Request[userservice.GetUserByUsernameRequest]) (*connect.Response[userservice.GetUserByUsernameResponse], error)
	ChangeUsername(context.Context, *connect.Request[userservice.ChangeUsernameRequest]) (*connect.Response[userservice.ChangeUsernameResponse], error)
	DeleteUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.DeleteUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := userservice.File_userservice_userservice_proto.Services().ByName("UserService").Methods()
	userServiceRegisterHandler := connect.NewUnaryHandler(
		UserServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(userServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLoginHandler := connect.NewUnaryHandler(
		UserServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(userServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLogoutHandler := connect.NewUnaryHandler(
		UserServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(userServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLogoutAllHandler := connect.NewUnaryHandler(
		UserServiceLogoutAllProcedure,
		svc.LogoutAll,
		connect.WithSchema(userServiceMethods.ByName("LogoutAll")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRefreshHandler := connect.NewUnaryHandler(
		UserServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(userServiceMethods.ByName("Refresh")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceVerifyHandler := connect.NewUnaryHandler(
		UserServiceVerifyProcedure,
		svc.Verify,
		connect.WithSchema(userServiceMethods.ByName("Verify")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceNewVerificationHandler := connect.NewUnaryHandler(
		UserServiceNewVerificationProcedure,
		svc.NewVerification,
		connect.WithSchema(userServiceMethods.ByName("NewVerification")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangeEmailHandler := connect.NewUnaryHandler(
		UserServiceChangeEmailProcedure,
		svc.ChangeEmail,
		connect.WithSchema(userServiceMethods.ByName("ChangeEmail")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangePasswordHandler := connect.NewUnaryHandler(
		UserServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserByUsernameHandler := connect.NewUnaryHandler(
		UserServiceGetUserByUsernameProcedure,
		svc.GetUserByUsername,
		connect.WithSchema(userServiceMethods.ByName("GetUserByUsername")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangeUsernameHandler := connect.NewUnaryHandler(
		UserServiceChangeUsernameProcedure,
		svc.ChangeUsername,
		connect.WithSchema(userServiceMethods.ByName("ChangeUsername")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/userservice.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceRegisterProcedure:
			userServiceRegisterHandler.ServeHTTP(w, r)
		case UserServiceLoginProcedure:
			userServiceLoginHandler.ServeHTTP(w, r)
		case UserServiceLogoutProcedure:
			userServiceLogoutHandler.ServeHTTP(w, r)
		case UserServiceLogoutAllProcedure:
			userServiceLogoutAllHandler.ServeHTTP(w, r)
		case UserServiceRefreshProcedure:
			userServiceRefreshHandler.ServeHTTP(w, r)
		case UserServiceVerifyProcedure:
			userServiceVerifyHandler.ServeHTTP(w, r)
		case UserServiceNewVerificationProcedure:
			userServiceNewVerificationHandler.ServeHTTP(w, r)
		case UserServiceChangeEmailProcedure:
			userServiceChangeEmailHandler.ServeHTTP(w, r)
		case UserServiceChangePasswordProcedure:
			userServiceChangePasswordHandler.ServeHTTP(w, r)
		case UserServiceGetUserByUsernameProcedure:
			userServiceGetUserByUsernameHandler.ServeHTTP(w, r)
		case UserServiceChangeUsernameProcedure:
			userServiceChangeUsernameHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Register(context.Context, *connect.Request[userservice.RegisterRequest]) (*connect.Response[userservice.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.Register is not implemented"))
}

func (UnimplementedUserServiceHandler) Login(context.Context, *connect.Request[userservice.LoginRequest]) (*connect.Response[userservice.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.Login is not implemented"))
}

func (UnimplementedUserServiceHandler) Logout(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.Logout is not implemented"))
}

func (UnimplementedUserServiceHandler) LogoutAll(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.LogoutAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.LogoutAll is not implemented"))
}

func (UnimplementedUserServiceHandler) Refresh(context.Context, *connect.Request[userservice.RefreshRequest]) (*connect.Response[userservice.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.Refresh is not implemented"))
}

func (UnimplementedUserServiceHandler) Verify(context.Context, *connect.Request[userservice.VerifyRequest]) (*connect.Response[userservice.VerifyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.Verify is not implemented"))
}

func (UnimplementedUserServiceHandler) NewVerification(context.Context, *connect.Request[userservice.NewVerificationRequest]) (*connect.Response[userservice.NewVerificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.NewVerification is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangeEmail(context.Context, *connect.Request[userservice.ChangeEmailRequest]) (*connect.Response[userservice.ChangeEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.ChangeEmail is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangePassword(context.Context, *connect.Request[userservice.ChangePasswordRequest]) (*connect.Response[userservice.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.ChangePassword is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByUsername(context.Context, *connect.Request[userservice.GetUserByUsernameRequest]) (*connect.Response[userservice.GetUserByUsernameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.GetUserByUsername is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangeUsername(context.Context, *connect.Request[userservice.ChangeUsernameRequest]) (*connect.Response[userservice.ChangeUsernameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.ChangeUsername is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[userservice.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userservice.UserService.DeleteUser is not implemented"))
}
